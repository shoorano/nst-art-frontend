{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.array = [];\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = {};\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    const container = this.container;\n    const options = container.options;\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    if (!handled) {\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    if (options.infection.enable) {\n      for (let i = 0; i < options.infection.infections; i++) {\n        const notInfected = this.array.filter(p => p.infectionStage === undefined);\n        const infected = Utils_1.Utils.itemFromArray(notInfected);\n        infected.startInfection(0);\n      }\n    }\n\n    this.interactionManager.init();\n    container.noise.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw(0);\n  }\n\n  removeAt(index, quantity) {\n    if (index >= 0 && index <= this.count) {\n      for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n        particle.destroy();\n      }\n    }\n  }\n\n  remove(particle) {\n    this.removeAt(this.array.indexOf(particle));\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.noise.update();\n\n    for (const particle of this.array) {\n      particle.bubble.inRange = false;\n\n      for (const [, plugin] of container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      if (!particle.destroyed) {\n        particle.update(delta);\n      }\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.interact(delta);\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    this.update(delta);\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.array) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n  }\n\n  push(nb, mousePosition) {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const limit = options.particles.number.limit * container.density;\n    this.pushing = true;\n\n    if (limit > 0) {\n      const countToRemove = this.count + nb - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    let pos;\n\n    if (mousePosition) {\n      pos = (_a = mousePosition.position) !== null && _a !== void 0 ? _a : {\n        x: 0,\n        y: 0\n      };\n    }\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(pos);\n    }\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions) {\n    const particle = new Particle_1.Particle(this.container, position, overrideOptions);\n    this.array.push(particle);\n    return particle;\n  }\n\n  removeQuantity(quantity) {\n    const options = this.container.options;\n    this.removeAt(0, quantity);\n\n    if (!options.particles.move.enable) {\n      this.container.play();\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","constructor","container","array","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","count","length","init","options","handled","plugin","plugins","particlesInitialization","undefined","i","particles","number","addParticle","infection","enable","infections","notInfected","filter","p","infectionStage","infected","Utils","itemFromArray","startInfection","noise","redraw","clear","draw","removeAt","index","quantity","particle","splice","destroy","remove","indexOf","update","delta","particlesToDelete","bubble","inRange","destroyed","particleUpdate","push","insert","Point","getPosition","interact","drawPlugin","nb","mousePosition","_a","limit","density","pushing","countToRemove","removeQuantity","pos","position","x","y","move","play","overrideOptions","Particle"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particles = void 0;\nconst Particle_1 = require(\"./Particle\");\nconst Utils_1 = require(\"../Utils\");\nconst InteractionManager_1 = require(\"./Particle/InteractionManager\");\nclass Particles {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\n        const canvasSize = this.container.canvas.size;\n        this.linksColors = {};\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n    }\n    get count() {\n        return this.array.length;\n    }\n    init() {\n        const container = this.container;\n        const options = container.options;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particlesInitialization !== undefined) {\n                handled = plugin.particlesInitialization();\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (!handled) {\n            for (let i = this.count; i < options.particles.number.value; i++) {\n                this.addParticle();\n            }\n        }\n        if (options.infection.enable) {\n            for (let i = 0; i < options.infection.infections; i++) {\n                const notInfected = this.array.filter((p) => p.infectionStage === undefined);\n                const infected = Utils_1.Utils.itemFromArray(notInfected);\n                infected.startInfection(0);\n            }\n        }\n        this.interactionManager.init();\n        container.noise.init();\n    }\n    redraw() {\n        this.clear();\n        this.init();\n        this.draw(0);\n    }\n    removeAt(index, quantity) {\n        if (index >= 0 && index <= this.count) {\n            for (const particle of this.array.splice(index, quantity !== null && quantity !== void 0 ? quantity : 1)) {\n                particle.destroy();\n            }\n        }\n    }\n    remove(particle) {\n        this.removeAt(this.array.indexOf(particle));\n    }\n    update(delta) {\n        const container = this.container;\n        const particlesToDelete = [];\n        container.noise.update();\n        for (const particle of this.array) {\n            particle.bubble.inRange = false;\n            for (const [, plugin] of container.plugins) {\n                if (particle.destroyed) {\n                    break;\n                }\n                if (plugin.particleUpdate) {\n                    plugin.particleUpdate(particle, delta);\n                }\n            }\n            if (!particle.destroyed) {\n                particle.update(delta);\n            }\n            if (particle.destroyed) {\n                particlesToDelete.push(particle);\n                continue;\n            }\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n        }\n        for (const particle of particlesToDelete) {\n            this.remove(particle);\n        }\n        this.interactionManager.interact(delta);\n    }\n    draw(delta) {\n        const container = this.container;\n        container.canvas.clear();\n        const canvasSize = this.container.canvas.size;\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(0, 0, canvasSize.width, canvasSize.height), 4);\n        this.update(delta);\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawPlugin(plugin, delta);\n        }\n        for (const p of this.array) {\n            p.draw(delta);\n        }\n    }\n    clear() {\n        this.array = [];\n    }\n    push(nb, mousePosition) {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const limit = options.particles.number.limit * container.density;\n        this.pushing = true;\n        if (limit > 0) {\n            const countToRemove = this.count + nb - limit;\n            if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n            }\n        }\n        let pos;\n        if (mousePosition) {\n            pos = (_a = mousePosition.position) !== null && _a !== void 0 ? _a : { x: 0, y: 0 };\n        }\n        for (let i = 0; i < nb; i++) {\n            this.addParticle(pos);\n        }\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n        this.pushing = false;\n    }\n    addParticle(position, overrideOptions) {\n        const particle = new Particle_1.Particle(this.container, position, overrideOptions);\n        this.array.push(particle);\n        return particle;\n    }\n    removeQuantity(quantity) {\n        const options = this.container.options;\n        this.removeAt(0, quantity);\n        if (!options.particles.move.enable) {\n            this.container.play();\n        }\n    }\n}\nexports.Particles = Particles;\n"]},"metadata":{},"sourceType":"script"}