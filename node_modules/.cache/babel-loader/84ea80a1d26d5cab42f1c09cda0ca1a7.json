{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n\n  isEnabled() {\n    return this.container.options.infection.enable;\n  }\n\n  reset() {}\n\n  interact(p1, delta) {\n    var _a, _b;\n\n    p1.updateInfection(delta);\n\n    if (p1.infectionStage === undefined) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.options;\n    const infectionOptions = options.infection;\n\n    if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n      return;\n    }\n\n    const infectionStage1 = infectionOptions.stages[p1.infectionStage];\n    const pxRatio = container.retina.pixelRatio;\n    const radius = p1.size.value * 2 + infectionStage1.radius * pxRatio;\n    const pos = p1.getPosition();\n    const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : p1.infectionStage;\n    const query = container.particles.quadTree.query(new Utils_1.Circle(pos.x, pos.y, radius)).filter(t => t.infectionStage === undefined || t.infectionStage !== p1.infectionStage);\n    const infections = infectionStage1.rate;\n    const neighbors = query.length;\n\n    for (const p2 of query) {\n      if (Math.random() < infections / neighbors) {\n        if (p2.infectionStage === undefined) {\n          p2.startInfection(infectedStage1);\n        } else if (p2.infectionStage < p1.infectionStage) {\n          p2.updateInfectionStage(infectedStage1);\n        } else if (p2.infectionStage > p1.infectionStage) {\n          const infectionStage2 = infectionOptions.stages[p2.infectionStage];\n          const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : p2.infectionStage;\n          p1.updateInfectionStage(infectedStage2);\n        }\n      }\n    }\n  }\n\n}\n\nexports.Infecter = Infecter;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Core/Particle/Interactions/Particles/Infecter.js"],"names":["Object","defineProperty","exports","value","Infecter","Utils_1","require","constructor","container","isEnabled","options","infection","enable","reset","interact","p1","delta","_a","_b","updateInfection","infectionStage","undefined","infectionOptions","stages","length","infectionStage1","pxRatio","retina","pixelRatio","radius","size","pos","getPosition","infectedStage1","infectedStage","query","particles","quadTree","Circle","x","y","filter","t","infections","rate","neighbors","p2","Math","random","startInfection","updateInfectionStage","infectionStage2","infectedStage2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    isEnabled() {\n        return this.container.options.infection.enable;\n    }\n    reset() {\n    }\n    interact(p1, delta) {\n        var _a, _b;\n        p1.updateInfection(delta);\n        if (p1.infectionStage === undefined) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const infectionOptions = options.infection;\n        if (!infectionOptions.enable || infectionOptions.stages.length < 1) {\n            return;\n        }\n        const infectionStage1 = infectionOptions.stages[p1.infectionStage];\n        const pxRatio = container.retina.pixelRatio;\n        const radius = p1.size.value * 2 + infectionStage1.radius * pxRatio;\n        const pos = p1.getPosition();\n        const infectedStage1 = (_a = infectionStage1.infectedStage) !== null && _a !== void 0 ? _a : p1.infectionStage;\n        const query = container.particles.quadTree\n            .query(new Utils_1.Circle(pos.x, pos.y, radius))\n            .filter((t) => t.infectionStage === undefined || t.infectionStage !== p1.infectionStage);\n        const infections = infectionStage1.rate;\n        const neighbors = query.length;\n        for (const p2 of query) {\n            if (Math.random() < infections / neighbors) {\n                if (p2.infectionStage === undefined) {\n                    p2.startInfection(infectedStage1);\n                }\n                else if (p2.infectionStage < p1.infectionStage) {\n                    p2.updateInfectionStage(infectedStage1);\n                }\n                else if (p2.infectionStage > p1.infectionStage) {\n                    const infectionStage2 = infectionOptions.stages[p2.infectionStage];\n                    const infectedStage2 = (_b = infectionStage2 === null || infectionStage2 === void 0 ? void 0 : infectionStage2.infectedStage) !== null && _b !== void 0 ? _b : p2.infectionStage;\n                    p1.updateInfectionStage(infectedStage2);\n                }\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"]},"metadata":{},"sourceType":"script"}