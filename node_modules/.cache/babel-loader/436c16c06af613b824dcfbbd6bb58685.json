{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n\n  move(delta) {\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n\n  moveParticle(delta) {\n    var _a;\n\n    const particle = this.particle;\n    const particlesOptions = particle.particlesOptions;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const options = container.options;\n    const slowFactor = this.getProximitySpeedFactor();\n    const deltaFactor = options.fpsLimit > 0 ? 60 * delta / 1000 : 3.6;\n    const baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n    const moveSpeed = baseSpeed / 2 * slowFactor * deltaFactor;\n    this.applyNoise(delta);\n    particle.position.x += particle.velocity.horizontal * moveSpeed;\n    particle.position.y += particle.velocity.vertical * moveSpeed;\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n  }\n\n  applyNoise(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.particlesOptions;\n    const noiseOptions = particlesOptions.move.noise;\n    const noiseEnabled = noiseOptions.enable;\n\n    if (!noiseEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastNoiseTime <= particle.noiseDelay) {\n      particle.lastNoiseTime += delta;\n      return;\n    }\n\n    const noise = container.noise.generate(particle);\n    particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n    particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n    particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n    particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n    particle.lastNoiseTime -= particle.noiseDelay;\n  }\n\n  moveParallax() {\n    const container = this.container;\n    const options = container.options;\n\n    if (!options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const windowDimension = {\n      height: window.innerHeight / 2,\n      width: window.innerWidth / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const tmp = {\n      x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n      y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce)\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.options;\n    const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","constructor","container","particle","move","delta","moveParticle","moveParallax","_a","particlesOptions","enable","options","slowFactor","getProximitySpeedFactor","deltaFactor","fpsLimit","baseSpeed","moveSpeed","retina","applyNoise","position","x","velocity","horizontal","y","vertical","vibrate","Math","sin","cos","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","generate","angle","length","Utils","clamp","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","windowDimension","height","window","innerHeight","width","innerWidth","parallaxSmooth","smooth","tmp","size","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","getDistance","radius","slowModeRadius","proximityFactor","modes","factor"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a;\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const options = container.options;\n        const slowFactor = this.getProximitySpeedFactor();\n        const deltaFactor = options.fpsLimit > 0 ? (60 * delta) / 1000 : 3.6;\n        const baseSpeed = (_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed;\n        const moveSpeed = (baseSpeed / 2) * slowFactor * deltaFactor;\n        this.applyNoise(delta);\n        particle.position.x += particle.velocity.horizontal * moveSpeed;\n        particle.position.y += particle.velocity.vertical * moveSpeed;\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n    }\n    applyNoise(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        const noiseOptions = particlesOptions.move.noise;\n        const noiseEnabled = noiseOptions.enable;\n        if (!noiseEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastNoiseTime <= particle.noiseDelay) {\n            particle.lastNoiseTime += delta;\n            return;\n        }\n        const noise = container.noise.generate(particle);\n        particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n        particle.velocity.horizontal = Utils_1.Utils.clamp(particle.velocity.horizontal, -1, 1);\n        particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n        particle.velocity.vertical = Utils_1.Utils.clamp(particle.velocity.vertical, -1, 1);\n        particle.lastNoiseTime -= particle.noiseDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.options;\n        if (!options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const windowDimension = {\n            height: window.innerHeight / 2,\n            width: window.innerWidth / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const tmp = {\n            x: (mousePos.x - windowDimension.width) * (particle.size.value / parallaxForce),\n            y: (mousePos.y - windowDimension.height) * (particle.size.value / parallaxForce),\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.options;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.Utils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}