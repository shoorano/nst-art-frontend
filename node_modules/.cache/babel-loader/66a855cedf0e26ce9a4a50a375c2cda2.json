{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Canvas = void 0;\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Canvas {\n  constructor(container) {\n    this.container = container;\n    this.size = {\n      height: 0,\n      width: 0\n    };\n    this.context = null;\n    this.generatedCanvas = false;\n  }\n\n  init() {\n    this.resize();\n    const options = this.container.options;\n    const cover = options.backgroundMask.cover;\n    const color = cover.color;\n    const trail = options.particles.move.trail;\n    this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n    this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n    this.paint();\n  }\n\n  loadCanvas(canvas, generatedCanvas) {\n    var _a;\n\n    if (!canvas.className) {\n      canvas.className = Utils_1.Constants.canvasClass;\n    }\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n    this.element = canvas;\n    this.size.height = canvas.offsetHeight;\n    this.size.width = canvas.offsetWidth;\n    this.context = this.element.getContext(\"2d\");\n    this.container.retina.init();\n    this.initBackground();\n  }\n\n  destroy() {\n    var _a;\n\n    if (this.generatedCanvas) {\n      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n    }\n\n    if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  resize() {\n    if (!this.element) {\n      return;\n    }\n\n    this.element.width = this.size.width;\n    this.element.height = this.size.height;\n  }\n\n  paint() {\n    const options = this.container.options;\n\n    if (this.context) {\n      if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n        this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n      } else {\n        this.paintBase();\n      }\n    }\n  }\n\n  clear() {\n    const options = this.container.options;\n    const trail = options.particles.move.trail;\n\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n      this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n    } else if (this.context) {\n      Utils_1.CanvasUtils.clear(this.context, this.size);\n    }\n  }\n\n  drawLinkTriangle(p1, link1, link2) {\n    var _a, _b;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link1.destination;\n    const p3 = link2.destination;\n    const triangleOptions = p1.particlesOptions.links.triangles;\n    const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const pos3 = p3.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n\n    if (!colorTriangle) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors[linksOptions.id] : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = p1.getColor();\n        const destColor = p2.getColor();\n\n        if (sourceColor && destColor) {\n          colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorTriangle = linkColor;\n      }\n    }\n\n    const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n  }\n\n  drawLinkLine(p1, link) {\n    var _a;\n\n    const container = this.container;\n    const options = container.options;\n    const p2 = link.destination;\n    let opacity = link.opacity;\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    let colorLine;\n    const twinkle = p1.particlesOptions.twinkle.lines;\n\n    if (twinkle.enable) {\n      const twinkleFreq = twinkle.frequency;\n      const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n      const twinkling = Math.random() < twinkleFreq;\n\n      if (twinkling && twinkleRgb !== undefined) {\n        colorLine = twinkleRgb;\n        opacity = twinkle.opacity;\n      }\n    }\n\n    if (!colorLine) {\n      const linksOptions = p1.particlesOptions.links;\n      const linkColor = linksOptions.id !== undefined ? container.particles.linksColors[linksOptions.id] : container.particles.linksColor;\n\n      if (linkColor === Utils_1.Constants.randomColorValue) {\n        colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n      } else if (linkColor === \"mid\") {\n        const sourceColor = p1.getColor();\n        const destColor = p2.getColor();\n\n        if (sourceColor && destColor) {\n          colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n        } else {\n          const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n\n          if (!hslColor) {\n            return;\n          }\n\n          colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n        }\n      } else {\n        colorLine = linkColor;\n      }\n    }\n\n    const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n    Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n  }\n\n  drawConnectLine(p1, p2) {\n    var _a;\n\n    const lineStyle = this.lineStyle(p1, p2);\n\n    if (!lineStyle) {\n      return;\n    }\n\n    const ctx = this.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const pos1 = p1.getPosition();\n    const pos2 = p2.getPosition();\n    Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n  }\n\n  drawGrabLine(particle, lineColor, opacity, mousePos) {\n    var _a;\n\n    const container = this.container;\n    const ctx = container.canvas.context;\n\n    if (!ctx) {\n      return;\n    }\n\n    const beginPos = particle.getPosition();\n    Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n  }\n\n  drawParticle(particle, delta) {\n    var _a, _b;\n\n    const pColor = particle.getColor();\n\n    if (pColor === undefined) {\n      return;\n    }\n\n    const options = this.container.options;\n    const twinkle = particle.particlesOptions.twinkle.particles;\n    const twinkleFreq = twinkle.frequency;\n    const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n    const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n    const radius = (_a = particle.bubble.radius) !== null && _a !== void 0 ? _a : particle.size.value;\n    const opacity = twinkling ? twinkle.opacity : (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : particle.opacity.value;\n    const infectionStage = particle.infectionStage;\n    const infection = options.infection;\n    const infectionStages = infection.stages;\n    const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n    const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n    const color = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pColor);\n    const colorValue = color !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(color, opacity) : undefined;\n\n    if (!this.context || !colorValue) {\n      return;\n    }\n\n    if (particle.links.length > 0) {\n      this.context.save();\n\n      for (const link of particle.links) {\n        if (particle.particlesOptions.links.triangles.enable) {\n          const links = particle.links.map(l => l.destination);\n          const vertices = link.destination.links.filter(t => links.indexOf(t.destination) >= 0);\n\n          if (vertices.length) {\n            for (const vertice of vertices) {\n              this.drawLinkTriangle(particle, link, vertice);\n            }\n          }\n        }\n\n        this.drawLinkLine(particle, link);\n      }\n\n      this.context.restore();\n    }\n\n    Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, colorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n  }\n\n  drawPlugin(plugin, delta) {\n    if (!this.context) {\n      return;\n    }\n\n    Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n  }\n\n  paintBase(baseColor) {\n    if (this.context) {\n      Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n    }\n  }\n\n  lineStyle(p1, p2) {\n    const options = this.container.options;\n    const connectOptions = options.interactivity.modes.connect;\n\n    if (this.context) {\n      return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n    }\n  }\n\n  initBackground() {\n    const options = this.container.options;\n    const background = options.background;\n    const element = this.element;\n\n    if (!element) {\n      return;\n    }\n\n    const elementStyle = element.style;\n\n    if (background.color) {\n      const color = Utils_1.ColorUtils.colorToRgb(background.color);\n\n      if (color) {\n        elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n      }\n    }\n\n    if (background.image) {\n      elementStyle.backgroundImage = background.image;\n    }\n\n    if (background.position) {\n      elementStyle.backgroundPosition = background.position;\n    }\n\n    if (background.repeat) {\n      elementStyle.backgroundRepeat = background.repeat;\n    }\n\n    if (background.size) {\n      elementStyle.backgroundSize = background.size;\n    }\n  }\n\n}\n\nexports.Canvas = Canvas;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Core/Canvas.js"],"names":["Object","defineProperty","exports","value","Canvas","Utils_1","require","constructor","container","size","height","width","context","generatedCanvas","init","resize","options","cover","backgroundMask","color","trail","particles","move","coverColor","ColorUtils","colorToRgb","trailFillColor","fillColor","paint","loadCanvas","canvas","_a","className","Constants","canvasClass","element","remove","offsetHeight","offsetWidth","getContext","retina","initBackground","destroy","CanvasUtils","clear","enable","paintBase","getStyleFromRgb","length","drawLinkTriangle","p1","link1","link2","_b","p2","destination","p3","triangleOptions","particlesOptions","links","triangles","opacityTriangle","opacity","pos1","getPosition","pos2","pos3","ctx","colorTriangle","linksOptions","linkColor","id","undefined","linksColors","linksColor","randomColorValue","getRandomRgbColor","sourceColor","getColor","destColor","mix","hslColor","hslToRgb","linksWidth","drawLinkLine","link","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","twinkling","Math","random","distance","warp","shadow","drawConnectLine","lineStyle","drawGrabLine","particle","lineColor","mousePos","beginPos","drawParticle","delta","pColor","radius","bubble","infectionStage","infection","infectionStages","stages","infectionColor","infectionRgb","colorValue","save","map","l","vertices","filter","t","indexOf","vertice","restore","drawPlugin","plugin","baseColor","connectOptions","interactivity","modes","connect","gradient","background","elementStyle","style","backgroundColor","image","backgroundImage","position","backgroundPosition","repeat","backgroundRepeat","backgroundSize"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Canvas = void 0;\nconst Utils_1 = require(\"../Utils\");\nclass Canvas {\n    constructor(container) {\n        this.container = container;\n        this.size = {\n            height: 0,\n            width: 0,\n        };\n        this.context = null;\n        this.generatedCanvas = false;\n    }\n    init() {\n        this.resize();\n        const options = this.container.options;\n        const cover = options.backgroundMask.cover;\n        const color = cover.color;\n        const trail = options.particles.move.trail;\n        this.coverColor = Utils_1.ColorUtils.colorToRgb(color);\n        this.trailFillColor = Utils_1.ColorUtils.colorToRgb(trail.fillColor);\n        this.paint();\n    }\n    loadCanvas(canvas, generatedCanvas) {\n        var _a;\n        if (!canvas.className) {\n            canvas.className = Utils_1.Constants.canvasClass;\n        }\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        this.generatedCanvas = generatedCanvas !== null && generatedCanvas !== void 0 ? generatedCanvas : false;\n        this.element = canvas;\n        this.size.height = canvas.offsetHeight;\n        this.size.width = canvas.offsetWidth;\n        this.context = this.element.getContext(\"2d\");\n        this.container.retina.init();\n        this.initBackground();\n    }\n    destroy() {\n        var _a;\n        if (this.generatedCanvas) {\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    resize() {\n        if (!this.element) {\n            return;\n        }\n        this.element.width = this.size.width;\n        this.element.height = this.size.height;\n    }\n    paint() {\n        const options = this.container.options;\n        if (this.context) {\n            if (options.backgroundMask.enable && options.backgroundMask.cover && this.coverColor) {\n                this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.coverColor));\n            }\n            else {\n                this.paintBase();\n            }\n        }\n    }\n    clear() {\n        const options = this.container.options;\n        const trail = options.particles.move.trail;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > 0 && this.trailFillColor) {\n            this.paintBase(Utils_1.ColorUtils.getStyleFromRgb(this.trailFillColor, 1 / trail.length));\n        }\n        else if (this.context) {\n            Utils_1.CanvasUtils.clear(this.context, this.size);\n        }\n    }\n    drawLinkTriangle(p1, link1, link2) {\n        var _a, _b;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link1.destination;\n        const p3 = link2.destination;\n        const triangleOptions = p1.particlesOptions.links.triangles;\n        const opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const pos3 = p3.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorTriangle = Utils_1.ColorUtils.colorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors[linksOptions.id]\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorTriangle = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getColor();\n                const destColor = p2.getColor();\n                if (sourceColor && destColor) {\n                    colorTriangle = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorTriangle = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorTriangle = linkColor;\n            }\n        }\n        const width = (_b = p1.linksWidth) !== null && _b !== void 0 ? _b : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkTriangle(ctx, width, pos1, pos2, pos3, options.backgroundMask.enable, colorTriangle, opacityTriangle);\n    }\n    drawLinkLine(p1, link) {\n        var _a;\n        const container = this.container;\n        const options = container.options;\n        const p2 = link.destination;\n        let opacity = link.opacity;\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        let colorLine;\n        const twinkle = p1.particlesOptions.twinkle.lines;\n        if (twinkle.enable) {\n            const twinkleFreq = twinkle.frequency;\n            const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n            const twinkling = Math.random() < twinkleFreq;\n            if (twinkling && twinkleRgb !== undefined) {\n                colorLine = twinkleRgb;\n                opacity = twinkle.opacity;\n            }\n        }\n        if (!colorLine) {\n            const linksOptions = p1.particlesOptions.links;\n            const linkColor = linksOptions.id !== undefined\n                ? container.particles.linksColors[linksOptions.id]\n                : container.particles.linksColor;\n            if (linkColor === Utils_1.Constants.randomColorValue) {\n                colorLine = Utils_1.ColorUtils.getRandomRgbColor();\n            }\n            else if (linkColor === \"mid\") {\n                const sourceColor = p1.getColor();\n                const destColor = p2.getColor();\n                if (sourceColor && destColor) {\n                    colorLine = Utils_1.ColorUtils.mix(sourceColor, destColor, p1.size.value, p2.size.value);\n                }\n                else {\n                    const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n                    if (!hslColor) {\n                        return;\n                    }\n                    colorLine = Utils_1.ColorUtils.hslToRgb(hslColor);\n                }\n            }\n            else {\n                colorLine = linkColor;\n            }\n        }\n        const width = (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth;\n        Utils_1.CanvasUtils.drawLinkLine(ctx, width, pos1, pos2, p1.particlesOptions.links.distance, container.canvas.size, p1.particlesOptions.links.warp, options.backgroundMask.enable, colorLine, opacity, p1.particlesOptions.links.shadow);\n    }\n    drawConnectLine(p1, p2) {\n        var _a;\n        const lineStyle = this.lineStyle(p1, p2);\n        if (!lineStyle) {\n            return;\n        }\n        const ctx = this.context;\n        if (!ctx) {\n            return;\n        }\n        const pos1 = p1.getPosition();\n        const pos2 = p2.getPosition();\n        Utils_1.CanvasUtils.drawConnectLine(ctx, (_a = p1.linksWidth) !== null && _a !== void 0 ? _a : this.container.retina.linksWidth, lineStyle, pos1, pos2);\n    }\n    drawGrabLine(particle, lineColor, opacity, mousePos) {\n        var _a;\n        const container = this.container;\n        const ctx = container.canvas.context;\n        if (!ctx) {\n            return;\n        }\n        const beginPos = particle.getPosition();\n        Utils_1.CanvasUtils.drawGrabLine(ctx, (_a = particle.linksWidth) !== null && _a !== void 0 ? _a : container.retina.linksWidth, beginPos, mousePos, lineColor, opacity);\n    }\n    drawParticle(particle, delta) {\n        var _a, _b;\n        const pColor = particle.getColor();\n        if (pColor === undefined) {\n            return;\n        }\n        const options = this.container.options;\n        const twinkle = particle.particlesOptions.twinkle.particles;\n        const twinkleFreq = twinkle.frequency;\n        const twinkleRgb = Utils_1.ColorUtils.colorToRgb(twinkle.color);\n        const twinkling = twinkle.enable && Math.random() < twinkleFreq;\n        const radius = (_a = particle.bubble.radius) !== null && _a !== void 0 ? _a : particle.size.value;\n        const opacity = twinkling ? twinkle.opacity : (_b = particle.bubble.opacity) !== null && _b !== void 0 ? _b : particle.opacity.value;\n        const infectionStage = particle.infectionStage;\n        const infection = options.infection;\n        const infectionStages = infection.stages;\n        const infectionColor = infectionStage !== undefined ? infectionStages[infectionStage].color : undefined;\n        const infectionRgb = Utils_1.ColorUtils.colorToRgb(infectionColor);\n        const color = twinkling && twinkleRgb !== undefined ? twinkleRgb : infectionRgb !== null && infectionRgb !== void 0 ? infectionRgb : Utils_1.ColorUtils.hslToRgb(pColor);\n        const colorValue = color !== undefined ? Utils_1.ColorUtils.getStyleFromRgb(color, opacity) : undefined;\n        if (!this.context || !colorValue) {\n            return;\n        }\n        if (particle.links.length > 0) {\n            this.context.save();\n            for (const link of particle.links) {\n                if (particle.particlesOptions.links.triangles.enable) {\n                    const links = particle.links.map((l) => l.destination);\n                    const vertices = link.destination.links.filter((t) => links.indexOf(t.destination) >= 0);\n                    if (vertices.length) {\n                        for (const vertice of vertices) {\n                            this.drawLinkTriangle(particle, link, vertice);\n                        }\n                    }\n                }\n                this.drawLinkLine(particle, link);\n            }\n            this.context.restore();\n        }\n        Utils_1.CanvasUtils.drawParticle(this.container, this.context, particle, delta, colorValue, options.backgroundMask.enable, radius, opacity, particle.particlesOptions.shadow);\n    }\n    drawPlugin(plugin, delta) {\n        if (!this.context) {\n            return;\n        }\n        Utils_1.CanvasUtils.drawPlugin(this.context, plugin, delta);\n    }\n    paintBase(baseColor) {\n        if (this.context) {\n            Utils_1.CanvasUtils.paintBase(this.context, this.size, baseColor);\n        }\n    }\n    lineStyle(p1, p2) {\n        const options = this.container.options;\n        const connectOptions = options.interactivity.modes.connect;\n        if (this.context) {\n            return Utils_1.CanvasUtils.gradient(this.context, p1, p2, connectOptions.links.opacity);\n        }\n    }\n    initBackground() {\n        const options = this.container.options;\n        const background = options.background;\n        const element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (background.color) {\n            const color = Utils_1.ColorUtils.colorToRgb(background.color);\n            if (color) {\n                elementStyle.backgroundColor = Utils_1.ColorUtils.getStyleFromRgb(color, background.opacity);\n            }\n        }\n        if (background.image) {\n            elementStyle.backgroundImage = background.image;\n        }\n        if (background.position) {\n            elementStyle.backgroundPosition = background.position;\n        }\n        if (background.repeat) {\n            elementStyle.backgroundRepeat = background.repeat;\n        }\n        if (background.size) {\n            elementStyle.backgroundSize = background.size;\n        }\n    }\n}\nexports.Canvas = Canvas;\n"]},"metadata":{},"sourceType":"script"}