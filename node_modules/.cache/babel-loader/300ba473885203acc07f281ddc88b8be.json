{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorUtils = void 0;\n\nconst Utils_1 = require(\"./Utils\");\n\nconst Constants_1 = require(\"./Constants\");\n\nclass ColorUtils {\n  static colorToRgb(input) {\n    var _a, _b;\n\n    if (input === undefined) {\n      return;\n    }\n\n    const color = typeof input === \"string\" ? {\n      value: input\n    } : input;\n    let res;\n\n    if (typeof color.value === \"string\") {\n      if (color.value === Constants_1.Constants.randomColorValue) {\n        res = this.getRandomRgbColor();\n      } else {\n        res = ColorUtils.stringToRgb(color.value);\n      }\n    } else {\n      if (color.value instanceof Array) {\n        const colorSelected = Utils_1.Utils.itemFromArray(color.value);\n        res = ColorUtils.colorToRgb({\n          value: colorSelected\n        });\n      } else {\n        const colorValue = color.value;\n        const rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n\n        if (rgbColor.r !== undefined) {\n          res = rgbColor;\n        } else {\n          const hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;\n\n          if (hslColor.h !== undefined) {\n            res = ColorUtils.hslToRgb(hslColor);\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n\n  static colorToHsl(color) {\n    const rgb = this.colorToRgb(color);\n    return rgb !== undefined ? this.rgbToHsl(rgb) : rgb;\n  }\n\n  static rgbToHsl(color) {\n    const r1 = color.r / 255;\n    const g1 = color.g / 255;\n    const b1 = color.b / 255;\n    const maxColor = Math.max(r1, g1, b1);\n    const minColor = Math.min(r1, g1, b1);\n    const res = {\n      h: 0,\n      l: (maxColor + minColor) / 2,\n      s: 0\n    };\n\n    if (maxColor != minColor) {\n      res.s = res.l < 0.5 ? (maxColor - minColor) / (maxColor + minColor) : (maxColor - minColor) / (2.0 - maxColor - minColor);\n      res.h = r1 === maxColor ? (g1 - b1) / (maxColor - minColor) : res.h = g1 === maxColor ? 2.0 + (b1 - r1) / (maxColor - minColor) : 4.0 + (r1 - g1) / (maxColor - minColor);\n    }\n\n    res.l *= 100;\n    res.s *= 100;\n    res.h *= 60;\n\n    if (res.h < 0) {\n      res.h += 360;\n    }\n\n    return res;\n  }\n\n  static stringToAlpha(input) {\n    var _a;\n\n    return (_a = ColorUtils.stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n  }\n\n  static stringToRgb(input) {\n    return ColorUtils.stringToRgba(input);\n  }\n\n  static hslToRgb(hsl) {\n    const result = {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    const hslPercent = {\n      h: hsl.h / 360,\n      l: hsl.l / 100,\n      s: hsl.s / 100\n    };\n\n    if (hslPercent.s === 0) {\n      result.b = hslPercent.l;\n      result.g = hslPercent.l;\n      result.r = hslPercent.l;\n    } else {\n      const q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;\n      const p = 2 * hslPercent.l - q;\n      result.r = ColorUtils.hue2rgb(p, q, hslPercent.h + 1 / 3);\n      result.g = ColorUtils.hue2rgb(p, q, hslPercent.h);\n      result.b = ColorUtils.hue2rgb(p, q, hslPercent.h - 1 / 3);\n    }\n\n    result.r = Math.floor(result.r * 255);\n    result.g = Math.floor(result.g * 255);\n    result.b = Math.floor(result.b * 255);\n    return result;\n  }\n\n  static hslaToRgba(hsla) {\n    const rgbResult = ColorUtils.hslToRgb(hsla);\n    return {\n      a: hsla.a,\n      b: rgbResult.b,\n      g: rgbResult.g,\n      r: rgbResult.r\n    };\n  }\n\n  static getRandomRgbColor(min) {\n    var _a;\n\n    const fixedMin = min || 0;\n    const minColor = fixedMin + fixedMin * Math.pow(16, 2) + fixedMin * Math.pow(16, 4);\n    const factor = minColor ^ 0xffffff;\n    const randomColor = Math.floor(Math.random() * factor | minColor).toString(16);\n    return (_a = this.stringToRgb(`#${randomColor}`)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n  }\n\n  static getStyleFromRgb(color, opacity) {\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity !== null && opacity !== void 0 ? opacity : 1})`;\n  }\n\n  static getStyleFromHsl(color, opacity) {\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity !== null && opacity !== void 0 ? opacity : 1})`;\n  }\n\n  static mix(color1, color2, size1, size2) {\n    let rgb1 = color1;\n    let rgb2 = color2;\n\n    if (rgb1.r === undefined) {\n      rgb1 = this.hslToRgb(color1);\n    }\n\n    if (rgb2.r === undefined) {\n      rgb2 = this.hslToRgb(color2);\n    }\n\n    return {\n      b: Utils_1.Utils.mix(rgb1.b, rgb2.b, size1, size2),\n      g: Utils_1.Utils.mix(rgb1.g, rgb2.g, size1, size2),\n      r: Utils_1.Utils.mix(rgb1.r, rgb2.r, size1, size2)\n    };\n  }\n\n  static hue2rgb(p, q, t) {\n    let tCalc = t;\n\n    if (tCalc < 0) {\n      tCalc += 1;\n    }\n\n    if (tCalc > 1) {\n      tCalc -= 1;\n    }\n\n    if (tCalc < 1 / 6) {\n      return p + (q - p) * 6 * tCalc;\n    }\n\n    if (tCalc < 1 / 2) {\n      return q;\n    }\n\n    if (tCalc < 2 / 3) {\n      return p + (q - p) * (2 / 3 - tCalc) * 6;\n    }\n\n    return p;\n  }\n\n  static stringToRgba(input) {\n    if (input.startsWith(\"rgb\")) {\n      const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n      const result = regex.exec(input);\n      return result ? {\n        a: result.length > 4 ? parseFloat(result[5]) : 1,\n        b: parseInt(result[3], 10),\n        g: parseInt(result[2], 10),\n        r: parseInt(result[1], 10)\n      } : undefined;\n    } else if (input.startsWith(\"hsl\")) {\n      const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n      const result = regex.exec(input);\n      return result ? ColorUtils.hslaToRgba({\n        a: result.length > 4 ? parseFloat(result[5]) : 1,\n        h: parseInt(result[1], 10),\n        l: parseInt(result[3], 10),\n        s: parseInt(result[2], 10)\n      }) : undefined;\n    } else {\n      const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n      const hexFixed = input.replace(shorthandRegex, (_m, r, g, b, a) => {\n        return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n      });\n      const regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\n      const result = regex.exec(hexFixed);\n      return result ? {\n        a: result[4] !== undefined ? parseInt(result[4], 16) / 0xff : 1,\n        b: parseInt(result[3], 16),\n        g: parseInt(result[2], 16),\n        r: parseInt(result[1], 16)\n      } : undefined;\n    }\n  }\n\n}\n\nexports.ColorUtils = ColorUtils;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Utils/ColorUtils.js"],"names":["Object","defineProperty","exports","value","ColorUtils","Utils_1","require","Constants_1","colorToRgb","input","_a","_b","undefined","color","res","Constants","randomColorValue","getRandomRgbColor","stringToRgb","Array","colorSelected","Utils","itemFromArray","colorValue","rgbColor","rgb","r","hslColor","hsl","h","hslToRgb","colorToHsl","rgbToHsl","r1","g1","g","b1","b","maxColor","Math","max","minColor","min","l","s","stringToAlpha","stringToRgba","a","result","hslPercent","q","p","hue2rgb","floor","hslaToRgba","hsla","rgbResult","fixedMin","pow","factor","randomColor","random","toString","getStyleFromRgb","opacity","getStyleFromHsl","mix","color1","color2","size1","size2","rgb1","rgb2","t","tCalc","startsWith","regex","exec","length","parseFloat","parseInt","shorthandRegex","hexFixed","replace","_m"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorUtils = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Constants_1 = require(\"./Constants\");\nclass ColorUtils {\n    static colorToRgb(input) {\n        var _a, _b;\n        if (input === undefined) {\n            return;\n        }\n        const color = typeof input === \"string\" ? { value: input } : input;\n        let res;\n        if (typeof color.value === \"string\") {\n            if (color.value === Constants_1.Constants.randomColorValue) {\n                res = this.getRandomRgbColor();\n            }\n            else {\n                res = ColorUtils.stringToRgb(color.value);\n            }\n        }\n        else {\n            if (color.value instanceof Array) {\n                const colorSelected = Utils_1.Utils.itemFromArray(color.value);\n                res = ColorUtils.colorToRgb({ value: colorSelected });\n            }\n            else {\n                const colorValue = color.value;\n                const rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n                if (rgbColor.r !== undefined) {\n                    res = rgbColor;\n                }\n                else {\n                    const hslColor = (_b = colorValue.hsl) !== null && _b !== void 0 ? _b : color.value;\n                    if (hslColor.h !== undefined) {\n                        res = ColorUtils.hslToRgb(hslColor);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    static colorToHsl(color) {\n        const rgb = this.colorToRgb(color);\n        return rgb !== undefined ? this.rgbToHsl(rgb) : rgb;\n    }\n    static rgbToHsl(color) {\n        const r1 = color.r / 255;\n        const g1 = color.g / 255;\n        const b1 = color.b / 255;\n        const maxColor = Math.max(r1, g1, b1);\n        const minColor = Math.min(r1, g1, b1);\n        const res = {\n            h: 0,\n            l: (maxColor + minColor) / 2,\n            s: 0,\n        };\n        if (maxColor != minColor) {\n            res.s =\n                res.l < 0.5\n                    ? (maxColor - minColor) / (maxColor + minColor)\n                    : (maxColor - minColor) / (2.0 - maxColor - minColor);\n            res.h =\n                r1 === maxColor\n                    ? (g1 - b1) / (maxColor - minColor)\n                    : (res.h =\n                        g1 === maxColor\n                            ? 2.0 + (b1 - r1) / (maxColor - minColor)\n                            : 4.0 + (r1 - g1) / (maxColor - minColor));\n        }\n        res.l *= 100;\n        res.s *= 100;\n        res.h *= 60;\n        if (res.h < 0) {\n            res.h += 360;\n        }\n        return res;\n    }\n    static stringToAlpha(input) {\n        var _a;\n        return (_a = ColorUtils.stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n    }\n    static stringToRgb(input) {\n        return ColorUtils.stringToRgba(input);\n    }\n    static hslToRgb(hsl) {\n        const result = { b: 0, g: 0, r: 0 };\n        const hslPercent = {\n            h: hsl.h / 360,\n            l: hsl.l / 100,\n            s: hsl.s / 100,\n        };\n        if (hslPercent.s === 0) {\n            result.b = hslPercent.l;\n            result.g = hslPercent.l;\n            result.r = hslPercent.l;\n        }\n        else {\n            const q = hslPercent.l < 0.5\n                ? hslPercent.l * (1 + hslPercent.s)\n                : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s;\n            const p = 2 * hslPercent.l - q;\n            result.r = ColorUtils.hue2rgb(p, q, hslPercent.h + 1 / 3);\n            result.g = ColorUtils.hue2rgb(p, q, hslPercent.h);\n            result.b = ColorUtils.hue2rgb(p, q, hslPercent.h - 1 / 3);\n        }\n        result.r = Math.floor(result.r * 255);\n        result.g = Math.floor(result.g * 255);\n        result.b = Math.floor(result.b * 255);\n        return result;\n    }\n    static hslaToRgba(hsla) {\n        const rgbResult = ColorUtils.hslToRgb(hsla);\n        return {\n            a: hsla.a,\n            b: rgbResult.b,\n            g: rgbResult.g,\n            r: rgbResult.r,\n        };\n    }\n    static getRandomRgbColor(min) {\n        var _a;\n        const fixedMin = min || 0;\n        const minColor = fixedMin + fixedMin * Math.pow(16, 2) + fixedMin * Math.pow(16, 4);\n        const factor = minColor ^ 0xffffff;\n        const randomColor = Math.floor((Math.random() * factor) | minColor).toString(16);\n        return ((_a = this.stringToRgb(`#${randomColor}`)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        });\n    }\n    static getStyleFromRgb(color, opacity) {\n        return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity !== null && opacity !== void 0 ? opacity : 1})`;\n    }\n    static getStyleFromHsl(color, opacity) {\n        return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity !== null && opacity !== void 0 ? opacity : 1})`;\n    }\n    static mix(color1, color2, size1, size2) {\n        let rgb1 = color1;\n        let rgb2 = color2;\n        if (rgb1.r === undefined) {\n            rgb1 = this.hslToRgb(color1);\n        }\n        if (rgb2.r === undefined) {\n            rgb2 = this.hslToRgb(color2);\n        }\n        return {\n            b: Utils_1.Utils.mix(rgb1.b, rgb2.b, size1, size2),\n            g: Utils_1.Utils.mix(rgb1.g, rgb2.g, size1, size2),\n            r: Utils_1.Utils.mix(rgb1.r, rgb2.r, size1, size2),\n        };\n    }\n    static hue2rgb(p, q, t) {\n        let tCalc = t;\n        if (tCalc < 0) {\n            tCalc += 1;\n        }\n        if (tCalc > 1) {\n            tCalc -= 1;\n        }\n        if (tCalc < 1 / 6) {\n            return p + (q - p) * 6 * tCalc;\n        }\n        if (tCalc < 1 / 2) {\n            return q;\n        }\n        if (tCalc < 2 / 3) {\n            return p + (q - p) * (2 / 3 - tCalc) * 6;\n        }\n        return p;\n    }\n    static stringToRgba(input) {\n        if (input.startsWith(\"rgb\")) {\n            const regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n            const result = regex.exec(input);\n            return result\n                ? {\n                    a: result.length > 4 ? parseFloat(result[5]) : 1,\n                    b: parseInt(result[3], 10),\n                    g: parseInt(result[2], 10),\n                    r: parseInt(result[1], 10),\n                }\n                : undefined;\n        }\n        else if (input.startsWith(\"hsl\")) {\n            const regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.]+)\\s*)?\\)/i;\n            const result = regex.exec(input);\n            return result\n                ? ColorUtils.hslaToRgba({\n                    a: result.length > 4 ? parseFloat(result[5]) : 1,\n                    h: parseInt(result[1], 10),\n                    l: parseInt(result[3], 10),\n                    s: parseInt(result[2], 10),\n                })\n                : undefined;\n        }\n        else {\n            const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i;\n            const hexFixed = input.replace(shorthandRegex, (_m, r, g, b, a) => {\n                return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n            });\n            const regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i;\n            const result = regex.exec(hexFixed);\n            return result\n                ? {\n                    a: result[4] !== undefined ? parseInt(result[4], 16) / 0xff : 1,\n                    b: parseInt(result[3], 16),\n                    g: parseInt(result[2], 16),\n                    r: parseInt(result[1], 16),\n                }\n                : undefined;\n        }\n    }\n}\nexports.ColorUtils = ColorUtils;\n"]},"metadata":{},"sourceType":"script"}