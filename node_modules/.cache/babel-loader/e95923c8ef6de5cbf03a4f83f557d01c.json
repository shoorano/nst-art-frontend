{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particle = void 0;\n\nconst Updater_1 = require(\"./Particle/Updater\");\n\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\n\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\n\nconst Enums_1 = require(\"../Enums\");\n\nconst Utils_1 = require(\"../Utils\");\n\nclass Particle {\n  constructor(container, position, overrideOptions) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n\n    this.container = container;\n    this.fill = true;\n    this.close = true;\n    this.links = [];\n    this.lastNoiseTime = 0;\n    this.destroyed = false;\n    const options = container.options;\n    const particlesOptions = new Particles_1.Particles();\n    particlesOptions.load(options.particles);\n\n    if ((overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) !== undefined) {\n      const shapeType = (_a = overrideOptions.shape.type) !== null && _a !== void 0 ? _a : particlesOptions.shape.type;\n      this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n      const shapeOptions = new Shape_1.Shape();\n      shapeOptions.load(overrideOptions.shape);\n\n      if (this.shape !== undefined) {\n        const shapeData = shapeOptions.options[this.shape];\n\n        if (shapeData !== undefined) {\n          this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n          this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n          this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        }\n      }\n    } else {\n      const shapeType = particlesOptions.shape.type;\n      this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n      const shapeData = particlesOptions.shape.options[this.shape];\n\n      if (shapeData) {\n        this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n        this.fill = (_g = (_f = this.shapeData) === null || _f === void 0 ? void 0 : _f.fill) !== null && _g !== void 0 ? _g : this.fill;\n        this.close = (_j = (_h = this.shapeData) === null || _h === void 0 ? void 0 : _h.close) !== null && _j !== void 0 ? _j : this.close;\n      }\n    }\n\n    if (overrideOptions !== undefined) {\n      particlesOptions.load(overrideOptions);\n    }\n\n    if (((_k = this.shapeData) === null || _k === void 0 ? void 0 : _k.particles) !== undefined) {\n      particlesOptions.load((_l = this.shapeData) === null || _l === void 0 ? void 0 : _l.particles);\n    }\n\n    this.particlesOptions = particlesOptions;\n    const noiseDelay = this.particlesOptions.move.noise.delay;\n    this.noiseDelay = (noiseDelay.random.enable ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value) : noiseDelay.value) * 1000;\n    container.retina.initParticle(this);\n    const color = this.particlesOptions.color;\n    const sizeValue = (_m = this.sizeValue) !== null && _m !== void 0 ? _m : container.retina.sizeValue;\n    const randomSize = typeof this.particlesOptions.size.random === \"boolean\" ? this.particlesOptions.size.random : this.particlesOptions.size.random.enable;\n    this.size = {\n      value: randomSize && this.randomMinimumSize !== undefined ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue) : sizeValue\n    };\n    this.direction = this.particlesOptions.move.direction;\n    this.bubble = {\n      inRange: false\n    };\n    this.angle = this.particlesOptions.rotate.random ? Math.random() * 360 : this.particlesOptions.rotate.value;\n\n    if (this.particlesOptions.rotate.direction === Enums_1.RotateDirection.random) {\n      const index = Math.floor(Math.random() * 2);\n\n      if (index > 0) {\n        this.rotateDirection = Enums_1.RotateDirection.counterClockwise;\n      } else {\n        this.rotateDirection = Enums_1.RotateDirection.clockwise;\n      }\n    } else {\n      this.rotateDirection = this.particlesOptions.rotate.direction;\n    }\n\n    if (this.particlesOptions.size.animation.enable) {\n      switch (this.particlesOptions.size.animation.startValue) {\n        case Enums_1.StartValueType.min:\n          if (!randomSize) {\n            const pxRatio = container.retina.pixelRatio;\n            this.size.value = this.particlesOptions.size.animation.minimumValue * pxRatio;\n          }\n\n          break;\n      }\n\n      this.size.status = Enums_1.SizeAnimationStatus.increasing;\n      this.size.velocity = ((_o = this.sizeAnimationSpeed) !== null && _o !== void 0 ? _o : container.retina.sizeAnimationSpeed) / 100;\n\n      if (!this.particlesOptions.size.animation.sync) {\n        this.size.velocity = this.size.velocity * Math.random();\n      }\n    }\n\n    if (this.particlesOptions.color.animation.enable) {\n      this.colorVelocity = this.particlesOptions.color.animation.speed / 100;\n\n      if (!this.particlesOptions.color.animation.sync) {\n        this.colorVelocity = this.colorVelocity * Math.random();\n      }\n    } else {\n      this.colorVelocity = 0;\n    }\n\n    if (this.particlesOptions.rotate.animation.enable) {\n      if (!this.particlesOptions.rotate.animation.sync) {\n        this.angle = Math.random() * 360;\n      }\n    }\n\n    this.position = this.calcPosition(this.container, position);\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n\n    if (this.particlesOptions.collisions.enable) {\n      this.checkOverlap(position);\n    }\n\n    this.color = Utils_1.ColorUtils.colorToHsl(color);\n    const randomOpacity = this.particlesOptions.opacity.random;\n    const opacityValue = this.particlesOptions.opacity.value;\n    this.opacity = {\n      value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue\n    };\n\n    if (this.particlesOptions.opacity.animation.enable) {\n      this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n      this.opacity.velocity = this.particlesOptions.opacity.animation.speed / 100;\n\n      if (!this.particlesOptions.opacity.animation.sync) {\n        this.opacity.velocity *= Math.random();\n      }\n    }\n\n    this.initialVelocity = this.calculateVelocity();\n    this.velocity = {\n      horizontal: this.initialVelocity.horizontal,\n      vertical: this.initialVelocity.vertical\n    };\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images) {\n      const shape = this.particlesOptions.shape;\n      const imageDrawer = drawer;\n      const imagesOptions = shape.options[this.shape];\n      const images = imageDrawer.getImages(container).images;\n      const index = Utils_1.Utils.arrayRandomIndex(images);\n      const image = images[index];\n      const optionsImage = imagesOptions instanceof Array ? imagesOptions.filter(t => t.src === image.source)[0] : imagesOptions;\n      const color = this.getColor();\n\n      if ((image === null || image === void 0 ? void 0 : image.svgData) !== undefined && optionsImage.replaceColor && color) {\n        const svgColoredData = Utils_1.Utils.replaceColorSvg(image, color, this.opacity.value);\n        const svg = new Blob([svgColoredData], {\n          type: \"image/svg+xml\"\n        });\n        const domUrl = window.URL || window.webkitURL || window;\n        const url = domUrl.createObjectURL(svg);\n        const img = new Image();\n        this.image = {\n          data: image,\n          loaded: false,\n          ratio: optionsImage.width / optionsImage.height,\n          replaceColor: (_p = optionsImage.replaceColor) !== null && _p !== void 0 ? _p : optionsImage.replace_color,\n          source: optionsImage.src\n        };\n        img.addEventListener(\"load\", () => {\n          if (this.image) {\n            this.image.loaded = true;\n            image.element = img;\n          }\n\n          domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", () => {\n          domUrl.revokeObjectURL(url);\n          Utils_1.Utils.loadImage(optionsImage.src).then(img2 => {\n            if (this.image) {\n              image.element = img2.element;\n              this.image.loaded = true;\n            }\n          });\n        });\n        img.src = url;\n      } else {\n        this.image = {\n          data: image,\n          loaded: true,\n          ratio: optionsImage.width / optionsImage.height,\n          replaceColor: (_q = optionsImage.replaceColor) !== null && _q !== void 0 ? _q : optionsImage.replace_color,\n          source: optionsImage.src\n        };\n      }\n\n      if (!this.image.ratio) {\n        this.image.ratio = 1;\n      }\n\n      this.fill = (_r = optionsImage.fill) !== null && _r !== void 0 ? _r : this.fill;\n      this.close = (_s = optionsImage.close) !== null && _s !== void 0 ? _s : this.close;\n    }\n\n    this.stroke = this.particlesOptions.stroke instanceof Array ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke) : this.particlesOptions.stroke;\n    this.strokeColor = Utils_1.ColorUtils.colorToRgb(this.stroke.color);\n    this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n    this.updater = new Updater_1.Updater(this.container, this);\n  }\n\n  update(delta) {\n    this.links = [];\n    this.updater.update(delta);\n  }\n\n  draw(delta) {\n    var _a;\n\n    if (((_a = this.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n      return;\n    }\n\n    this.container.canvas.drawParticle(this, delta);\n  }\n\n  isOverlapping() {\n    const container = this.container;\n    let collisionFound = false;\n    let iterations = 0;\n    const pos1 = this.getPosition();\n\n    for (const p2 of container.particles.array.filter(t => t != this)) {\n      iterations++;\n      const pos2 = p2.getPosition();\n      const dist = Utils_1.Utils.getDistance(pos1, pos2);\n\n      if (dist <= this.size.value + p2.size.value) {\n        collisionFound = true;\n        break;\n      }\n    }\n\n    return {\n      collisionFound: collisionFound,\n      iterations: iterations\n    };\n  }\n\n  checkOverlap(position) {\n    const container = this.container;\n    const overlapResult = this.isOverlapping();\n\n    if (overlapResult.iterations >= container.particles.count) {\n      container.particles.remove(this);\n    } else if (overlapResult.collisionFound) {\n      this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\n      this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\n      this.checkOverlap();\n    }\n  }\n\n  startInfection(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n\n    this.infectionDelay = 0;\n    this.infectionDelayStage = stage;\n  }\n\n  updateInfectionStage(stage) {\n    const container = this.container;\n    const options = container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stage > stagesCount || stage < 0 || this.infectionStage !== undefined && this.infectionStage > stage) {\n      return;\n    }\n\n    if (this.infectionTimeout !== undefined) {\n      window.clearTimeout(this.infectionTimeout);\n    }\n\n    this.infectionStage = stage;\n    this.infectionTime = 0;\n  }\n\n  updateInfection(delta) {\n    const container = this.container;\n    const options = container.options;\n    const infection = options.infection;\n    const stages = options.infection.stages;\n    const stagesCount = stages.length;\n\n    if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n      const stage = this.infectionDelayStage;\n\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n\n      if (this.infectionDelay > infection.delay * 1000) {\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n        delete this.infectionDelay;\n        delete this.infectionDelayStage;\n      } else {\n        this.infectionDelay += delta;\n      }\n    } else {\n      delete this.infectionDelay;\n      delete this.infectionDelayStage;\n    }\n\n    if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n      const infectionStage = stages[this.infectionStage];\n\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (this.infectionTime > infectionStage.duration * 1000) {\n          this.nextInfectionStage();\n        } else {\n          this.infectionTime += delta;\n        }\n      } else {\n        this.infectionTime += delta;\n      }\n    } else {\n      delete this.infectionStage;\n      delete this.infectionTime;\n    }\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y\n    };\n  }\n\n  getColor() {\n    var _a;\n\n    return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\n  }\n\n  destroy() {\n    this.destroyed = true;\n  }\n\n  nextInfectionStage() {\n    const container = this.container;\n    const options = container.options;\n    const stagesCount = options.infection.stages.length;\n\n    if (stagesCount <= 0 || this.infectionStage === undefined) {\n      return;\n    }\n\n    this.infectionTime = 0;\n\n    if (stagesCount <= ++this.infectionStage) {\n      if (options.infection.cure) {\n        delete this.infectionStage;\n        delete this.infectionTime;\n        return;\n      } else {\n        this.infectionStage = 0;\n        this.infectionTime = 0;\n      }\n    }\n  }\n\n  calcPosition(container, position) {\n    var _a, _b;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Utils_1.Utils.deepExtend({}, pluginPos);\n      }\n    }\n\n    const pos = {\n      x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n      y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height\n    };\n    const outMode = this.particlesOptions.move.outMode;\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n      if (pos.x > container.canvas.size.width - this.size.value * 2) {\n        pos.x -= this.size.value;\n      } else if (pos.x < this.size.value * 2) {\n        pos.x += this.size.value;\n      }\n    }\n\n    if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n      if (pos.y > container.canvas.size.height - this.size.value * 2) {\n        pos.y -= this.size.value;\n      } else if (pos.y < this.size.value * 2) {\n        pos.y += this.size.value;\n      }\n    }\n\n    return pos;\n  }\n\n  calculateVelocity() {\n    const baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\n    const res = {\n      horizontal: 0,\n      vertical: 0\n    };\n    const moveOptions = this.particlesOptions.move;\n    const rad = Math.PI / 180 * moveOptions.angle;\n    const rad45 = Math.PI / 4;\n    const range = {\n      left: Math.sin(rad45 + rad / 2) - Math.sin(rad45 - rad / 2),\n      right: Math.cos(rad45 + rad / 2) - Math.cos(rad45 - rad / 2)\n    };\n\n    if (moveOptions.straight) {\n      res.horizontal = baseVelocity.x;\n      res.vertical = baseVelocity.y;\n\n      if (moveOptions.random) {\n        res.horizontal += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n        res.vertical += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n      }\n    } else {\n      res.horizontal = baseVelocity.x + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n      res.vertical = baseVelocity.y + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n    }\n\n    return res;\n  }\n\n}\n\nexports.Particle = Particle;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Core/Particle.js"],"names":["Object","defineProperty","exports","value","Particle","Updater_1","require","Particles_1","Shape_1","Enums_1","Utils_1","constructor","container","position","overrideOptions","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","fill","close","links","lastNoiseTime","destroyed","options","particlesOptions","Particles","load","particles","shape","undefined","shapeType","type","Array","Utils","itemFromArray","shapeOptions","Shape","shapeData","deepExtend","noiseDelay","move","noise","delay","random","enable","randomInRange","minimumValue","retina","initParticle","color","sizeValue","randomSize","size","randomMinimumSize","direction","bubble","inRange","angle","rotate","Math","RotateDirection","index","floor","rotateDirection","counterClockwise","clockwise","animation","startValue","StartValueType","min","pxRatio","pixelRatio","status","SizeAnimationStatus","increasing","velocity","sizeAnimationSpeed","sync","colorVelocity","speed","calcPosition","offset","x","y","collisions","checkOverlap","ColorUtils","colorToHsl","randomOpacity","opacity","opacityValue","OpacityAnimationStatus","initialVelocity","calculateVelocity","horizontal","vertical","drawer","drawers","get","Plugins","getShapeDrawer","set","ShapeType","image","images","imageDrawer","imagesOptions","getImages","arrayRandomIndex","optionsImage","filter","t","src","source","getColor","svgData","replaceColor","svgColoredData","replaceColorSvg","svg","Blob","domUrl","window","URL","webkitURL","url","createObjectURL","img","Image","data","loaded","ratio","width","height","replace_color","addEventListener","element","revokeObjectURL","loadImage","then","img2","stroke","strokeColor","colorToRgb","shadowColor","shadow","updater","Updater","update","delta","draw","canvas","drawParticle","isOverlapping","collisionFound","iterations","pos1","getPosition","p2","array","pos2","dist","getDistance","overlapResult","count","remove","startInfection","stage","stages","infection","stagesCount","length","infectionDelay","infectionDelayStage","updateInfectionStage","infectionStage","infectionTimeout","clearTimeout","infectionTime","updateInfection","duration","nextInfectionStage","destroy","cure","plugin","plugins","pluginPos","particlePosition","pos","outMode","isInArray","OutMode","bounce","bounceHorizontal","bounceVertical","baseVelocity","getParticleBaseVelocity","res","moveOptions","rad","PI","rad45","range","left","sin","right","cos","straight"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Particle = void 0;\nconst Updater_1 = require(\"./Particle/Updater\");\nconst Particles_1 = require(\"../Options/Classes/Particles/Particles\");\nconst Shape_1 = require(\"../Options/Classes/Particles/Shape/Shape\");\nconst Enums_1 = require(\"../Enums\");\nconst Utils_1 = require(\"../Utils\");\nclass Particle {\n    constructor(container, position, overrideOptions) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;\n        this.container = container;\n        this.fill = true;\n        this.close = true;\n        this.links = [];\n        this.lastNoiseTime = 0;\n        this.destroyed = false;\n        const options = container.options;\n        const particlesOptions = new Particles_1.Particles();\n        particlesOptions.load(options.particles);\n        if ((overrideOptions === null || overrideOptions === void 0 ? void 0 : overrideOptions.shape) !== undefined) {\n            const shapeType = (_a = overrideOptions.shape.type) !== null && _a !== void 0 ? _a : particlesOptions.shape.type;\n            this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n            const shapeOptions = new Shape_1.Shape();\n            shapeOptions.load(overrideOptions.shape);\n            if (this.shape !== undefined) {\n                const shapeData = shapeOptions.options[this.shape];\n                if (shapeData !== undefined) {\n                    this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n                    this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n                    this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n                }\n            }\n        }\n        else {\n            const shapeType = particlesOptions.shape.type;\n            this.shape = shapeType instanceof Array ? Utils_1.Utils.itemFromArray(shapeType) : shapeType;\n            const shapeData = particlesOptions.shape.options[this.shape];\n            if (shapeData) {\n                this.shapeData = Utils_1.Utils.deepExtend({}, shapeData instanceof Array ? Utils_1.Utils.itemFromArray(shapeData) : shapeData);\n                this.fill = (_g = (_f = this.shapeData) === null || _f === void 0 ? void 0 : _f.fill) !== null && _g !== void 0 ? _g : this.fill;\n                this.close = (_j = (_h = this.shapeData) === null || _h === void 0 ? void 0 : _h.close) !== null && _j !== void 0 ? _j : this.close;\n            }\n        }\n        if (overrideOptions !== undefined) {\n            particlesOptions.load(overrideOptions);\n        }\n        if (((_k = this.shapeData) === null || _k === void 0 ? void 0 : _k.particles) !== undefined) {\n            particlesOptions.load((_l = this.shapeData) === null || _l === void 0 ? void 0 : _l.particles);\n        }\n        this.particlesOptions = particlesOptions;\n        const noiseDelay = this.particlesOptions.move.noise.delay;\n        this.noiseDelay =\n            (noiseDelay.random.enable\n                ? Utils_1.Utils.randomInRange(noiseDelay.random.minimumValue, noiseDelay.value)\n                : noiseDelay.value) * 1000;\n        container.retina.initParticle(this);\n        const color = this.particlesOptions.color;\n        const sizeValue = (_m = this.sizeValue) !== null && _m !== void 0 ? _m : container.retina.sizeValue;\n        const randomSize = typeof this.particlesOptions.size.random === \"boolean\"\n            ? this.particlesOptions.size.random\n            : this.particlesOptions.size.random.enable;\n        this.size = {\n            value: randomSize && this.randomMinimumSize !== undefined\n                ? Utils_1.Utils.randomInRange(this.randomMinimumSize, sizeValue)\n                : sizeValue,\n        };\n        this.direction = this.particlesOptions.move.direction;\n        this.bubble = {\n            inRange: false,\n        };\n        this.angle = this.particlesOptions.rotate.random ? Math.random() * 360 : this.particlesOptions.rotate.value;\n        if (this.particlesOptions.rotate.direction === Enums_1.RotateDirection.random) {\n            const index = Math.floor(Math.random() * 2);\n            if (index > 0) {\n                this.rotateDirection = Enums_1.RotateDirection.counterClockwise;\n            }\n            else {\n                this.rotateDirection = Enums_1.RotateDirection.clockwise;\n            }\n        }\n        else {\n            this.rotateDirection = this.particlesOptions.rotate.direction;\n        }\n        if (this.particlesOptions.size.animation.enable) {\n            switch (this.particlesOptions.size.animation.startValue) {\n                case Enums_1.StartValueType.min:\n                    if (!randomSize) {\n                        const pxRatio = container.retina.pixelRatio;\n                        this.size.value = this.particlesOptions.size.animation.minimumValue * pxRatio;\n                    }\n                    break;\n            }\n            this.size.status = Enums_1.SizeAnimationStatus.increasing;\n            this.size.velocity = ((_o = this.sizeAnimationSpeed) !== null && _o !== void 0 ? _o : container.retina.sizeAnimationSpeed) / 100;\n            if (!this.particlesOptions.size.animation.sync) {\n                this.size.velocity = this.size.velocity * Math.random();\n            }\n        }\n        if (this.particlesOptions.color.animation.enable) {\n            this.colorVelocity = this.particlesOptions.color.animation.speed / 100;\n            if (!this.particlesOptions.color.animation.sync) {\n                this.colorVelocity = this.colorVelocity * Math.random();\n            }\n        }\n        else {\n            this.colorVelocity = 0;\n        }\n        if (this.particlesOptions.rotate.animation.enable) {\n            if (!this.particlesOptions.rotate.animation.sync) {\n                this.angle = Math.random() * 360;\n            }\n        }\n        this.position = this.calcPosition(this.container, position);\n        this.offset = {\n            x: 0,\n            y: 0,\n        };\n        if (this.particlesOptions.collisions.enable) {\n            this.checkOverlap(position);\n        }\n        this.color = Utils_1.ColorUtils.colorToHsl(color);\n        const randomOpacity = this.particlesOptions.opacity.random;\n        const opacityValue = this.particlesOptions.opacity.value;\n        this.opacity = {\n            value: randomOpacity.enable ? Utils_1.Utils.randomInRange(randomOpacity.minimumValue, opacityValue) : opacityValue,\n        };\n        if (this.particlesOptions.opacity.animation.enable) {\n            this.opacity.status = Enums_1.OpacityAnimationStatus.increasing;\n            this.opacity.velocity = this.particlesOptions.opacity.animation.speed / 100;\n            if (!this.particlesOptions.opacity.animation.sync) {\n                this.opacity.velocity *= Math.random();\n            }\n        }\n        this.initialVelocity = this.calculateVelocity();\n        this.velocity = {\n            horizontal: this.initialVelocity.horizontal,\n            vertical: this.initialVelocity.vertical,\n        };\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = Utils_1.Plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (this.shape === Enums_1.ShapeType.image || this.shape === Enums_1.ShapeType.images) {\n            const shape = this.particlesOptions.shape;\n            const imageDrawer = drawer;\n            const imagesOptions = shape.options[this.shape];\n            const images = imageDrawer.getImages(container).images;\n            const index = Utils_1.Utils.arrayRandomIndex(images);\n            const image = images[index];\n            const optionsImage = (imagesOptions instanceof Array\n                ? imagesOptions.filter((t) => t.src === image.source)[0]\n                : imagesOptions);\n            const color = this.getColor();\n            if ((image === null || image === void 0 ? void 0 : image.svgData) !== undefined && optionsImage.replaceColor && color) {\n                const svgColoredData = Utils_1.Utils.replaceColorSvg(image, color, this.opacity.value);\n                const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" });\n                const domUrl = window.URL || window.webkitURL || window;\n                const url = domUrl.createObjectURL(svg);\n                const img = new Image();\n                this.image = {\n                    data: image,\n                    loaded: false,\n                    ratio: optionsImage.width / optionsImage.height,\n                    replaceColor: (_p = optionsImage.replaceColor) !== null && _p !== void 0 ? _p : optionsImage.replace_color,\n                    source: optionsImage.src,\n                };\n                img.addEventListener(\"load\", () => {\n                    if (this.image) {\n                        this.image.loaded = true;\n                        image.element = img;\n                    }\n                    domUrl.revokeObjectURL(url);\n                });\n                img.addEventListener(\"error\", () => {\n                    domUrl.revokeObjectURL(url);\n                    Utils_1.Utils.loadImage(optionsImage.src).then((img2) => {\n                        if (this.image) {\n                            image.element = img2.element;\n                            this.image.loaded = true;\n                        }\n                    });\n                });\n                img.src = url;\n            }\n            else {\n                this.image = {\n                    data: image,\n                    loaded: true,\n                    ratio: optionsImage.width / optionsImage.height,\n                    replaceColor: (_q = optionsImage.replaceColor) !== null && _q !== void 0 ? _q : optionsImage.replace_color,\n                    source: optionsImage.src,\n                };\n            }\n            if (!this.image.ratio) {\n                this.image.ratio = 1;\n            }\n            this.fill = (_r = optionsImage.fill) !== null && _r !== void 0 ? _r : this.fill;\n            this.close = (_s = optionsImage.close) !== null && _s !== void 0 ? _s : this.close;\n        }\n        this.stroke =\n            this.particlesOptions.stroke instanceof Array\n                ? Utils_1.Utils.itemFromArray(this.particlesOptions.stroke)\n                : this.particlesOptions.stroke;\n        this.strokeColor = Utils_1.ColorUtils.colorToRgb(this.stroke.color);\n        this.shadowColor = Utils_1.ColorUtils.colorToRgb(this.particlesOptions.shadow.color);\n        this.updater = new Updater_1.Updater(this.container, this);\n    }\n    update(delta) {\n        this.links = [];\n        this.updater.update(delta);\n    }\n    draw(delta) {\n        var _a;\n        if (((_a = this.image) === null || _a === void 0 ? void 0 : _a.loaded) === false) {\n            return;\n        }\n        this.container.canvas.drawParticle(this, delta);\n    }\n    isOverlapping() {\n        const container = this.container;\n        let collisionFound = false;\n        let iterations = 0;\n        const pos1 = this.getPosition();\n        for (const p2 of container.particles.array.filter((t) => t != this)) {\n            iterations++;\n            const pos2 = p2.getPosition();\n            const dist = Utils_1.Utils.getDistance(pos1, pos2);\n            if (dist <= this.size.value + p2.size.value) {\n                collisionFound = true;\n                break;\n            }\n        }\n        return {\n            collisionFound: collisionFound,\n            iterations: iterations,\n        };\n    }\n    checkOverlap(position) {\n        const container = this.container;\n        const overlapResult = this.isOverlapping();\n        if (overlapResult.iterations >= container.particles.count) {\n            container.particles.remove(this);\n        }\n        else if (overlapResult.collisionFound) {\n            this.position.x = position ? position.x : Math.random() * container.canvas.size.width;\n            this.position.y = position ? position.y : Math.random() * container.canvas.size.height;\n            this.checkOverlap();\n        }\n    }\n    startInfection(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (stage > stagesCount || stage < 0) {\n            return;\n        }\n        this.infectionDelay = 0;\n        this.infectionDelayStage = stage;\n    }\n    updateInfectionStage(stage) {\n        const container = this.container;\n        const options = container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stage > stagesCount || stage < 0 || (this.infectionStage !== undefined && this.infectionStage > stage)) {\n            return;\n        }\n        if (this.infectionTimeout !== undefined) {\n            window.clearTimeout(this.infectionTimeout);\n        }\n        this.infectionStage = stage;\n        this.infectionTime = 0;\n    }\n    updateInfection(delta) {\n        const container = this.container;\n        const options = container.options;\n        const infection = options.infection;\n        const stages = options.infection.stages;\n        const stagesCount = stages.length;\n        if (this.infectionDelay !== undefined && this.infectionDelayStage !== undefined) {\n            const stage = this.infectionDelayStage;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            if (this.infectionDelay > infection.delay * 1000) {\n                this.infectionStage = stage;\n                this.infectionTime = 0;\n                delete this.infectionDelay;\n                delete this.infectionDelayStage;\n            }\n            else {\n                this.infectionDelay += delta;\n            }\n        }\n        else {\n            delete this.infectionDelay;\n            delete this.infectionDelayStage;\n        }\n        if (this.infectionStage !== undefined && this.infectionTime !== undefined) {\n            const infectionStage = stages[this.infectionStage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                if (this.infectionTime > infectionStage.duration * 1000) {\n                    this.nextInfectionStage();\n                }\n                else {\n                    this.infectionTime += delta;\n                }\n            }\n            else {\n                this.infectionTime += delta;\n            }\n        }\n        else {\n            delete this.infectionStage;\n            delete this.infectionTime;\n        }\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n        };\n    }\n    getColor() {\n        var _a;\n        return (_a = this.bubble.color) !== null && _a !== void 0 ? _a : this.color;\n    }\n    destroy() {\n        this.destroyed = true;\n    }\n    nextInfectionStage() {\n        const container = this.container;\n        const options = container.options;\n        const stagesCount = options.infection.stages.length;\n        if (stagesCount <= 0 || this.infectionStage === undefined) {\n            return;\n        }\n        this.infectionTime = 0;\n        if (stagesCount <= ++this.infectionStage) {\n            if (options.infection.cure) {\n                delete this.infectionStage;\n                delete this.infectionTime;\n                return;\n            }\n            else {\n                this.infectionStage = 0;\n                this.infectionTime = 0;\n            }\n        }\n    }\n    calcPosition(container, position) {\n        var _a, _b;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Utils_1.Utils.deepExtend({}, pluginPos);\n            }\n        }\n        const pos = {\n            x: (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * container.canvas.size.width,\n            y: (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * container.canvas.size.height,\n        };\n        const outMode = this.particlesOptions.move.outMode;\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceHorizontal)) {\n            if (pos.x > container.canvas.size.width - this.size.value * 2) {\n                pos.x -= this.size.value;\n            }\n            else if (pos.x < this.size.value * 2) {\n                pos.x += this.size.value;\n            }\n        }\n        if (Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounce) || Utils_1.Utils.isInArray(outMode, Enums_1.OutMode.bounceVertical)) {\n            if (pos.y > container.canvas.size.height - this.size.value * 2) {\n                pos.y -= this.size.value;\n            }\n            else if (pos.y < this.size.value * 2) {\n                pos.y += this.size.value;\n            }\n        }\n        return pos;\n    }\n    calculateVelocity() {\n        const baseVelocity = Utils_1.Utils.getParticleBaseVelocity(this);\n        const res = {\n            horizontal: 0,\n            vertical: 0,\n        };\n        const moveOptions = this.particlesOptions.move;\n        const rad = (Math.PI / 180) * moveOptions.angle;\n        const rad45 = Math.PI / 4;\n        const range = {\n            left: Math.sin(rad45 + rad / 2) - Math.sin(rad45 - rad / 2),\n            right: Math.cos(rad45 + rad / 2) - Math.cos(rad45 - rad / 2),\n        };\n        if (moveOptions.straight) {\n            res.horizontal = baseVelocity.x;\n            res.vertical = baseVelocity.y;\n            if (moveOptions.random) {\n                res.horizontal += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n                res.vertical += Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n            }\n        }\n        else {\n            res.horizontal = baseVelocity.x + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n            res.vertical = baseVelocity.y + Utils_1.Utils.randomInRange(range.left, range.right) / 2;\n        }\n        return res;\n    }\n}\nexports.Particle = Particle;\n"]},"metadata":{},"sourceType":"script"}