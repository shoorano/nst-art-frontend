{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return this.plugins.filter(t => t.id === plugin)[0];\n  }\n\n  static addPlugin(plugin) {\n    if (!this.getPlugin(plugin.id)) {\n      this.plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n    const availablePlugins = this.plugins.filter(t => t.needsPlugin(container.options));\n\n    for (const plugin of availablePlugins) {\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of this.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return this.presets.get(preset);\n  }\n\n  static addPreset(presetKey, options) {\n    if (!this.getPreset(presetKey)) {\n      this.presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!this.getShapeDrawer(type)) {\n      this.drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return this.drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return this.drawers.keys();\n  }\n\n}\n\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","getPlugin","plugin","plugins","filter","t","id","addPlugin","push","getAvailablePlugins","container","res","Map","availablePlugins","needsPlugin","options","set","loadOptions","sourceOptions","getPreset","preset","presets","get","addPreset","presetKey","addShapeDrawer","type","drawer","getShapeDrawer","drawers","getSupportedShapes","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMA,OAAN,CAAc;AACV,SAAOC,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,WAAO,KAAKC,OAAL,CAAaC,MAAb,CAAqBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAApC,EAA4C,CAA5C,CAAP;AACH;;AACD,SAAOK,SAAP,CAAiBL,MAAjB,EAAyB;AACrB,QAAI,CAAC,KAAKD,SAAL,CAAeC,MAAM,CAACI,EAAtB,CAAL,EAAgC;AAC5B,WAAKH,OAAL,CAAaK,IAAb,CAAkBN,MAAlB;AACH;AACJ;;AACD,SAAOO,mBAAP,CAA2BC,SAA3B,EAAsC;AAClC,UAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;AACA,UAAMC,gBAAgB,GAAG,KAAKV,OAAL,CAAaC,MAAb,CAAqBC,CAAD,IAAOA,CAAC,CAACS,WAAF,CAAcJ,SAAS,CAACK,OAAxB,CAA3B,CAAzB;;AACA,SAAK,MAAMb,MAAX,IAAqBW,gBAArB,EAAuC;AACnCF,MAAAA,GAAG,CAACK,GAAJ,CAAQd,MAAM,CAACI,EAAf,EAAmBJ,MAAM,CAACD,SAAP,CAAiBS,SAAjB,CAAnB;AACH;;AACD,WAAOC,GAAP;AACH;;AACD,SAAOM,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B,EAA2C;AACvC,SAAK,MAAMhB,MAAX,IAAqB,KAAKC,OAA1B,EAAmC;AAC/BD,MAAAA,MAAM,CAACe,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B;AACH;AACJ;;AACD,SAAOC,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,WAAO,KAAKC,OAAL,CAAaC,GAAb,CAAiBF,MAAjB,CAAP;AACH;;AACD,SAAOG,SAAP,CAAiBC,SAAjB,EAA4BT,OAA5B,EAAqC;AACjC,QAAI,CAAC,KAAKI,SAAL,CAAeK,SAAf,CAAL,EAAgC;AAC5B,WAAKH,OAAL,CAAaL,GAAb,CAAiBQ,SAAjB,EAA4BT,OAA5B;AACH;AACJ;;AACD,SAAOU,cAAP,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAChC,QAAI,CAAC,KAAKC,cAAL,CAAoBF,IAApB,CAAL,EAAgC;AAC5B,WAAKG,OAAL,CAAab,GAAb,CAAiBU,IAAjB,EAAuBC,MAAvB;AACH;AACJ;;AACD,SAAOC,cAAP,CAAsBF,IAAtB,EAA4B;AACxB,WAAO,KAAKG,OAAL,CAAaP,GAAb,CAAiBI,IAAjB,CAAP;AACH;;AACD,SAAOI,kBAAP,GAA4B;AACxB,WAAO,KAAKD,OAAL,CAAaE,IAAb,EAAP;AACH;;AAxCS;;AA0CdjC,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAA,OAAO,CAACG,OAAR,GAAkB,EAAlB;AACAH,OAAO,CAACqB,OAAR,GAAkB,IAAIT,GAAJ,EAAlB;AACAZ,OAAO,CAAC6B,OAAR,GAAkB,IAAIjB,GAAJ,EAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nclass Plugins {\n    static getPlugin(plugin) {\n        return this.plugins.filter((t) => t.id === plugin)[0];\n    }\n    static addPlugin(plugin) {\n        if (!this.getPlugin(plugin.id)) {\n            this.plugins.push(plugin);\n        }\n    }\n    static getAvailablePlugins(container) {\n        const res = new Map();\n        const availablePlugins = this.plugins.filter((t) => t.needsPlugin(container.options));\n        for (const plugin of availablePlugins) {\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    static loadOptions(options, sourceOptions) {\n        for (const plugin of this.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    static getPreset(preset) {\n        return this.presets.get(preset);\n    }\n    static addPreset(presetKey, options) {\n        if (!this.getPreset(presetKey)) {\n            this.presets.set(presetKey, options);\n        }\n    }\n    static addShapeDrawer(type, drawer) {\n        if (!this.getShapeDrawer(type)) {\n            this.drawers.set(type, drawer);\n        }\n    }\n    static getShapeDrawer(type) {\n        return this.drawers.get(type);\n    }\n    static getSupportedShapes() {\n        return this.drawers.keys();\n    }\n}\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();\n"]},"metadata":{},"sourceType":"script"}