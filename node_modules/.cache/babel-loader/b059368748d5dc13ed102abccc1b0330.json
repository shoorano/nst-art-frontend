{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position;\n    this.options = options;\n    let size = options.size.value * container.retina.pixelRatio;\n    const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n    const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n\n    if (random) {\n      size = Utils_1.Utils.randomInRange(minSize, size);\n    }\n\n    this.opacity = this.options.opacity;\n    this.size = size * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density;\n    const limit = options.size.limit;\n    this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n  }\n\n  attract(particle) {\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = Utils_1.Utils.getDistances(this.position, pos);\n    const angle = Math.atan2(dx, dy) * (180 / Math.PI);\n    const acceleration = this.mass / Math.pow(distance, 2);\n\n    if (distance < this.size + particle.size.value) {\n      const sizeFactor = particle.size.value * 0.033;\n\n      if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n        particle.destroy();\n      } else {\n        particle.size.value -= sizeFactor;\n        particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n        particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n      }\n\n      if (this.limit === undefined || this.size < this.limit) {\n        this.size += sizeFactor;\n      }\n\n      this.mass += sizeFactor * this.options.size.density;\n    } else {\n      particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n      particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a;\n\n    const container = this.container;\n    const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n      x: Math.random() * 100,\n      y: Math.random() * 100\n    };\n    return {\n      x: percentPosition.x / 100 * container.canvas.size.width,\n      y: percentPosition.y / 100 * container.canvas.size.height\n    };\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/Users/danwilloughby/Desktop/ZTM/NST/nst-art-frontend/node_modules/tsparticles/dist/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","constructor","absorbers","container","options","position","_a","_b","initialPosition","size","retina","pixelRatio","random","enable","minSize","minimumValue","Utils","randomInRange","opacity","mass","density","limit","undefined","color","ColorUtils","colorToRgb","b","g","r","calcPosition","attract","particle","pos","getPosition","dx","dy","distance","getDistances","angle","Math","atan2","PI","acceleration","pow","sizeFactor","destroy","velocity","horizontal","sin","vertical","cos","resize","isPointInside","canvas","draw","context","translate","x","y","beginPath","arc","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","width","height"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position;\n        this.options = options;\n        let size = options.size.value * container.retina.pixelRatio;\n        const random = typeof options.size.random === \"boolean\" ? options.size.random : options.size.random.enable;\n        const minSize = typeof options.size.random === \"boolean\" ? 1 : options.size.random.minimumValue;\n        if (random) {\n            size = Utils_1.Utils.randomInRange(minSize, size);\n        }\n        this.opacity = this.options.opacity;\n        this.size = size * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density;\n        const limit = options.size.limit;\n        this.limit = limit !== undefined ? limit * container.retina.pixelRatio : limit;\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_a = Utils_1.ColorUtils.colorToRgb(color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    }\n    attract(particle) {\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = Utils_1.Utils.getDistances(this.position, pos);\n        const angle = Math.atan2(dx, dy) * (180 / Math.PI);\n        const acceleration = this.mass / Math.pow(distance, 2);\n        if (distance < this.size + particle.size.value) {\n            const sizeFactor = particle.size.value * 0.033;\n            if (this.size > particle.size.value && distance < this.size - particle.size.value) {\n                particle.destroy();\n            }\n            else {\n                particle.size.value -= sizeFactor;\n                particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n                particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n            }\n            if (this.limit === undefined || this.size < this.limit) {\n                this.size += sizeFactor;\n            }\n            this.mass += sizeFactor * this.options.size.density;\n        }\n        else {\n            particle.velocity.horizontal += Math.sin(angle * (Math.PI / 180)) * acceleration;\n            particle.velocity.vertical += Math.cos(angle * (Math.PI / 180)) * acceleration;\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.Utils.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = Utils_1.ColorUtils.getStyleFromRgb(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a;\n        const container = this.container;\n        const percentPosition = (_a = this.options.position) !== null && _a !== void 0 ? _a : {\n            x: Math.random() * 100,\n            y: Math.random() * 100,\n        };\n        return {\n            x: (percentPosition.x / 100) * container.canvas.size.width,\n            y: (percentPosition.y / 100) * container.canvas.size.height,\n        };\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}